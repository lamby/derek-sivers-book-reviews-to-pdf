#!/usr/bin/env python

import sys
import logging
import optparse
import requests
import tempfile
import subprocess

from lxml import etree
from lxml.cssselect import CSSSelector

BASE_URL = 'https://sivers.org'

TITLE_PAGE = """
<html>
<body>
<h1>Books I've Read</h1>
<p>Derek Sivers</p>
</body>
</html>
"""

STYLESHEET = """
body {
    font-size: 200%;
    font-family: serif;
}

a {
    color: black !important;
    border-bottom: dashed 1px black !important;
    text-decoration: none !important;
}

h1,
h2,
h3 {
  color: black !important;
}

h1 {
  font-size: 180%;
  text-align: left;
  line-height: 120%;
}

h1 a,
h2 a,
h3 a,
h4 a,
h5 a,
h6 a {
    border: none !important;
    text-decoration: none !important;
}

p {
    text-align: justify;
}

h2,
section#masthead,
header p {
  display: none !important;
}

header {
 font-size: 80%;
}

img {
  float: inherit !important;
  display: block !important;
  margin-bottom: 30px;
}

#booksummary {
  font-style: oblique !important;
  font-weight: normal !important;
}

"""

class DerekSiversBookReviewsToPDF(object):
    def __init__(self):
        self.session = None

    def main(self):
        parser = optparse.OptionParser(
            usage='%prog [options] <filename.pdf>',
        )

        parser.add_option('--verbosity', dest='verbosity', default=0, type='int',
            help="Verbosity level; 0=minimal output, 1=normal output, "
                "2=verbose output, 3=very verbose output")
        parser.add_option('--wkhtmltopdf', dest='wkhtmltopdf',
            default='/usr/bin/wkhtmltopdf', help="Location of wkhtmltopdf binary")

        self.options, args = parser.parse_args()

        if len(args) != 1:
            parser.error("must specify an output filename")

        self.options.filename = args[0]

        self.setup_logging()
        self.create_pdf()

        return 0

    def create_pdf(self):
        index = self.parse('%s%s' % (BASE_URL, '/book?sort=date'))

        urls = [
            '%s%s' % (BASE_URL, x.find('a').get('href'))
            for x in CSSSelector('figure.abook')(index)
        ]

        with tempfile.NamedTemporaryFile(suffix='.html') as title_page, \
                tempfile.NamedTemporaryFile() as stylesheet:
            title_page.write(TITLE_PAGE)
            title_page.flush()

            stylesheet.write(STYLESHEET)
            stylesheet.flush()

            args = [
                self.options.wkhtmltopdf,
                '--allow', BASE_URL,
                '--user-style-sheet', 'file://%s' % stylesheet.name,
                '--disable-javascript',
            ]

            args.append('file://%s' % title_page.name)
            args.append('toc')
            args.extend(urls)
            args.append(self.options.filename)

            self.log.info("Executing: %s", ' '.join(args))
            subprocess.check_call(args)

    def parse(self, *args, **kwargs):
        return etree.HTML(self.GET(*args, **kwargs))

    def GET(self, url):
        if self.session is None:
            self.session = requests.Session()

        response = self.session.get(url, headers={'User-agent': 'Mozilla/5.0'})
        response.raise_for_status()

        return response.text

    def setup_logging(self):
        self.log = logging.getLogger()
        self.log.setLevel({
            0: logging.WARNING,
            1: logging.INFO,
            2: logging.DEBUG,
        }[self.options.verbosity])

        handler = logging.StreamHandler(sys.stderr)
        handler.setFormatter(
            logging.Formatter('%(asctime).19s %(levelname).1s %(message)s')
        )
        self.log.addHandler(handler)

if __name__ == '__main__':
    sys.exit(DerekSiversBookReviewsToPDF().main())
